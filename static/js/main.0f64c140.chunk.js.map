{"version":3,"sources":["components/Header.jsx","components/Linechart.jsx","pages/HomePage.jsx","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","Link","to","Linechart","methods","data","reverse","groupBy","x","y","shapeConfig","Line","strokeWidth","es","config","url","HomePage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetch","concat","then","res","json","result","lastMeasurement","value","stateDescription","setState","greatestMeasurementsDate","datetime","class","align","Component","Boolean","window","location","hostname","match","history","createBrowserHistory","ReactDOM","render","BrowserRouter","basename","process","Switch","Route","path","exact","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0RAGAA,EAAA,SAAeC,GAAK,OAClBC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oFACdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,eAAeE,GAAG,KAAlC,4BAAgEL,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,oECD5DI,EAAA,SAAAP,GACX,IAAMQ,EAAU,CACZC,KAAMT,EAAMS,KAAKC,UACjBC,QAAS,OACTC,EAAG,WACHC,EAAG,QACHC,YAAa,CACTC,KAAM,CACFC,YAAa,KAKzB,OACIf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAUC,OAAQV,KCfpBW,EAAM,uDAESC,cACnB,SAAAA,EAAYpB,GAAO,IAAAqB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMxB,KACD4B,MAAQ,CACXnB,KAAM,IAHSY,mFAOC,IAAAQ,EAAAL,KAClBM,MAAK,GAAAC,OAAIZ,EAAJ,QACFa,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJ,IAAMC,EAAkBD,EAAO,GAAGE,MAC9BC,EAAmB,GAEnBA,EADEF,EAAkB,IACD,sCACVA,EAAkB,IACR,6BAEA,qCAEvBP,EAAKU,SAAS,CACZ9B,KAAM0B,EACNC,kBACAE,uBAINR,MAAK,GAAAC,OAAIZ,EAAJ,aACJa,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJN,EAAKU,SAAS,CACZC,yBAA0BL,EAAOM,8CAMrC,OACExC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACJ,EAAD,MACAE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKuC,MAAM,cAAcC,MAAM,UAC7B1C,EAAAC,EAAAC,cAAA,KAAGuC,MAAM,aAAalB,KAAKI,MAAMU,kBACjCrC,EAAAC,EAAAC,cAAA,KAAGuC,MAAM,aAAT,0BAA0ClB,KAAKI,MAAMQ,iBACrDnC,EAAAC,EAAAC,cAAA,KAAGuC,MAAM,aAAT,sCAAwDzC,EAAAC,EAAAC,cAAA,WAAMqB,KAAKI,MAAMY,2BAE3EvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACI,EAAD,CAAWE,KAAMe,KAAKI,MAAMnB,iBAhDFmC,aCOlBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECRAC,QAAUC,KAEhBC,IAASC,OACPpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAeJ,QAASA,EAASK,SAAUC,yBACzCvD,EAAAC,EAAAC,cAACsD,EAAA,EAAD,KACExD,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWzC,MAE1B0C,SAASC,eAAe,SD4GtC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.0f64c140.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom'\n\nexport default props =>\n  <header className=\"navbar navbar-expand-sm navbar-expand-md navbar-dark bg-dark fixed-top pt-2 pb-2\">\n      <Link className=\"navbar-brand\" to=\"/\" >HOME IRRIGATION PROJECT  <br/><small>Arduíno (Uno + Yun) + React + Node.js</small></Link>\n  </header>","import React from 'react';\nimport { LinePlot } from 'd3plus-react'\n// import axios from 'axios'\n\nexport default props => {\n    const methods = {\n        data: props.data.reverse(),\n        groupBy: \"type\",\n        x: \"datetime\",\n        y: \"value\",\n        shapeConfig: {\n            Line: {\n                strokeWidth: 5\n            }\n        }\n    };\n\n    return (\n        <LinePlot config={methods} />\n    )\n}","import React, { Component } from 'react';\nimport { Header, Linechart } from '../components';\n\nconst url = 'https://iot-irrigation-hk.herokuapp.com/measurements'\n\nexport default class HomePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    }\n  }\n\n  componentDidMount() {\n    fetch(`${url}/10`)\n      .then(res => res.json())\n      .then(result => {\n        const lastMeasurement = result[0].value;\n        let stateDescription = '';\n          if (lastMeasurement > 800) {\n            stateDescription = 'Sua plantinha Precisando de água';\n          } else if (lastMeasurement > 600) {\n            stateDescription = 'Sua plantinha está bem!';\n          } else {\n            stateDescription = 'Sua plantinha está muito bem =D';\n          }\n        this.setState({\n          data: result,\n          lastMeasurement,\n          stateDescription\n        })\n      });\n\n    fetch(`${url}/greater`)\n    .then(res => res.json())\n    .then(result => {\n      this.setState({\n        greatestMeasurementsDate: result.datetime\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"page\">\n        <Header />\n        <div className=\"row\">\n          <div class=\"card col-12\" align=\"center\">\n            <p class=\"card-text\">{this.state.stateDescription}</p>\n            <p class=\"card-text\">A umidade atual é : {this.state.lastMeasurement}</p>\n            <p class=\"card-text\">Ela foi regada pela ultima vez as: <br/>{this.state.greatestMeasurementsDate}</p>\n          </div>\n          <div className=\"col-12\">\n            <Linechart data={this.state.data} />\n          </div>\n        </div>\n      </div>\n    );\n  };\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport './css/index.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { HomePage } from './pages';\nimport * as serviceWorker from './serviceWorker';\n\nimport createBrowserHistory from \"history/createBrowserHistory\";\nconst history = createBrowserHistory()\n\nReactDOM.render(\n  <BrowserRouter history={history} basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <Route path=\"/\" exact={true} component={HomePage} />\n    </Switch>\n  </BrowserRouter>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}